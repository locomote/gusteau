#!/usr/bin/env ruby

require 'rubygems'
require 'optitron'
require 'coderay'

$LOAD_PATH << File.expand_path("../..", __FILE__)
require 'lib/gusteau'

class Gusteau::CLI < Optitron::CLI

  class_opt 'bootstrap', 'Install chef-solo'
  class_opt 'format',    'Output format to use', :short_name => 'F', :type => :string
  class_opt 'log_level', 'Set the log level',    :in => %w{debug info warn error fatal}
  class_opt 'why-run',   'Enable whyrun mode',   :short_name => 'W'

  desc 'Fully converge a node'
  def converge(node_name)
    node(node_name).converge(params_with_node(node_name))
  end

  desc 'Apply a run_list'
  def apply(node_name, run_list)
    node(node_name).apply(run_list.split(","), params_with_node(node_name))
  end

  desc 'SSH into a node'
  def ssh(node_name)
    node(node_name).ssh
  end

  desc 'Generate an SSH config'
  def ssh_config
    puts Gusteau::SSHConfig.new(nodes)
  end

  desc 'Generate an example project (a bureau)'
  def init(bureau_name)
    Gusteau::Bureau.new(bureau_name).generate!
  end

  desc 'Lists all known nodes'
  def list
    puts nodes_list
  end

  desc 'Show the configuration of a specific node'
  def show(node_name)
    node_yaml = node(node_name).config.to_yaml
    puts CodeRay.scan(node_yaml, :yaml).term
  end

  private

  def node(node_name)
    unless node = nodes[node_name]
      abort "Node '#{node_name}' is unknown. #{nodes_list}"
    else
      node
    end
  end

  def nodes
    Gusteau::Config.read('.gusteau.yml')
    Gusteau::Config.nodes
  end

  def nodes_list
    "Known nodes are:\n - #{nodes.keys.join("\n - ")}"
  end

  def params_with_node(node_name)
    params.merge('node' => node(node_name))
  end

end

Gusteau::CLI.dispatch
